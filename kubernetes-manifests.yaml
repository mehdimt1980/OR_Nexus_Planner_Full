# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: nexus-or-planner

---
# Secret for environment variables
apiVersion: v1
kind: Secret
metadata:
  name: nexus-or-planner-secrets
  namespace: nexus-or-planner
type: Opaque
data:
  # Base64 encoded values - replace with your actual encoded values
  GOOGLE_API_KEY: <BASE64_ENCODED_GOOGLE_API_KEY>
  # Add other secrets as needed

---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nexus-or-planner-config
  namespace: nexus-or-planner
data:
  NODE_ENV: "production"
  PORT: "3000"

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-or-planner
  namespace: nexus-or-planner
  labels:
    app: nexus-or-planner
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nexus-or-planner
  template:
    metadata:
      labels:
        app: nexus-or-planner
    spec:
      containers:
      - name: nexus-or-planner
        image: <ACR_NAME>.azurecr.io/nexus-or-planner:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: nexus-or-planner-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: nexus-or-planner-config
              key: PORT
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: nexus-or-planner-secrets
              key: GOOGLE_API_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: nexus-or-planner-service
  namespace: nexus-or-planner
spec:
  selector:
    app: nexus-or-planner
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: ClusterIP

---
# Ingress (using nginx ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-or-planner-ingress
  namespace: nexus-or-planner
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Optional: for SSL
spec:
  tls:
  - hosts:
    - nexus-or-planner.yourdomain.com  # Replace with your domain
    secretName: nexus-or-planner-tls
  rules:
  - host: nexus-or-planner.yourdomain.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nexus-or-planner-service
            port:
              number: 80
